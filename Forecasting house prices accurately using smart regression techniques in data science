# -----------------------------
# 1. Import Required Libraries
# -----------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb

import warnings
warnings.filterwarnings('ignore')

# -----------------------------
# 2. Load and Inspect Dataset
# -----------------------------
df = pd.read_csv('house_prices.csv')  # Replace with your dataset path
print(df.head())
print(df.info())

# -----------------------------
# 3. Data Preprocessing
# -----------------------------
# Handle missing values
df = df.dropna(axis=1, thresh=0.8*len(df))  # drop columns with >20% missing
df = df.fillna(df.median(numeric_only=True))  # fill numeric missing with median

# Encode categorical features
df = pd.get_dummies(df, drop_first=True)

# Remove outliers
numeric_cols = df.select_dtypes(include=[np.number])
for col in numeric_cols.columns:
    df = df[(np.abs(df[col] - df[col].mean()) / df[col].std()) < 3]

# -----------------------------
# 4. Feature and Target Split
# -----------------------------
X = df.drop('SalePrice', axis=1)
y = df['SalePrice']

# -----------------------------
# 5. Train-Test Split
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -----------------------------
# 6. Feature Scaling
# -----------------------------
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# -----------------------------
# 7. Model Training & Evaluation Function
# -----------------------------
def evaluate_model(model, X_train, y_train, X_test, y_test):
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    print(f"{model.__class__.__name__} Results:")
    print("RÂ² Score:", r2_score(y_test, preds))
    print("MAE:", mean_absolute_error(y_test, preds))
    print("RMSE:", np.sqrt(mean_squared_error(y_test, preds)))
    print("-" * 40)
    return preds

# -----------------------------
# 8. Train Models
# -----------------------------
models = [
    LinearRegression(),
    Ridge(alpha=10),
    Lasso(alpha=0.01),
    RandomForestRegressor(n_estimators=100, random_state=42),
    xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3)
]

for model in models:
    evaluate_model(model, X_train, y_train, X_test, y_test)

# -----------------------------
# 9. Feature Importance (Random Forest)
# -----------------------------
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
importances = rf.feature_importances_
indices = np.argsort(importances)[-10:]  # Top 10
plt.figure(figsize=(10,6))
plt.title("Feature Importances (Random Forest)")
plt.barh(range(len(indices)), importances[indices], align="center")
plt.yticks(range(len(indices)), [X.columns[i] for i in indices])
plt.xlabel("Relative Importance")
plt.show()

# -----------------------------
# 10. Residual Plot (Best Model Example)
# -----------------------------
best_model = xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3)
best_model.fit(X_train, y_train)
residuals = y_test - best_model.predict(X_test)
plt.figure(figsize=(10,6))
sns.histplot(residuals, kde=True)
plt.title("Residuals Distribution")
plt.show()
